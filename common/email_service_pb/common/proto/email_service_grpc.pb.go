// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: common/proto/email_service.proto

package email_service_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnreadEmailCountClient is the client API for UnreadEmailCount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnreadEmailCountClient interface {
	GetUnreadEmailCount(ctx context.Context, in *UnreadCountRequest, opts ...grpc.CallOption) (*UnreadCountResponse, error)
	SubscribeToInbox(ctx context.Context, in *SubscribtionCmd, opts ...grpc.CallOption) (*SubCmdResponse, error)
}

type unreadEmailCountClient struct {
	cc grpc.ClientConnInterface
}

func NewUnreadEmailCountClient(cc grpc.ClientConnInterface) UnreadEmailCountClient {
	return &unreadEmailCountClient{cc}
}

func (c *unreadEmailCountClient) GetUnreadEmailCount(ctx context.Context, in *UnreadCountRequest, opts ...grpc.CallOption) (*UnreadCountResponse, error) {
	out := new(UnreadCountResponse)
	err := c.cc.Invoke(ctx, "/email_proto.UnreadEmailCount/GetUnreadEmailCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unreadEmailCountClient) SubscribeToInbox(ctx context.Context, in *SubscribtionCmd, opts ...grpc.CallOption) (*SubCmdResponse, error) {
	out := new(SubCmdResponse)
	err := c.cc.Invoke(ctx, "/email_proto.UnreadEmailCount/SubscribeToInbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnreadEmailCountServer is the server API for UnreadEmailCount service.
// All implementations must embed UnimplementedUnreadEmailCountServer
// for forward compatibility
type UnreadEmailCountServer interface {
	GetUnreadEmailCount(context.Context, *UnreadCountRequest) (*UnreadCountResponse, error)
	SubscribeToInbox(context.Context, *SubscribtionCmd) (*SubCmdResponse, error)
	mustEmbedUnimplementedUnreadEmailCountServer()
}

// UnimplementedUnreadEmailCountServer must be embedded to have forward compatible implementations.
type UnimplementedUnreadEmailCountServer struct {
}

func (UnimplementedUnreadEmailCountServer) GetUnreadEmailCount(context.Context, *UnreadCountRequest) (*UnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadEmailCount not implemented")
}
func (UnimplementedUnreadEmailCountServer) SubscribeToInbox(context.Context, *SubscribtionCmd) (*SubCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToInbox not implemented")
}
func (UnimplementedUnreadEmailCountServer) mustEmbedUnimplementedUnreadEmailCountServer() {}

// UnsafeUnreadEmailCountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnreadEmailCountServer will
// result in compilation errors.
type UnsafeUnreadEmailCountServer interface {
	mustEmbedUnimplementedUnreadEmailCountServer()
}

func RegisterUnreadEmailCountServer(s grpc.ServiceRegistrar, srv UnreadEmailCountServer) {
	s.RegisterService(&UnreadEmailCount_ServiceDesc, srv)
}

func _UnreadEmailCount_GetUnreadEmailCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnreadEmailCountServer).GetUnreadEmailCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email_proto.UnreadEmailCount/GetUnreadEmailCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnreadEmailCountServer).GetUnreadEmailCount(ctx, req.(*UnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UnreadEmailCount_SubscribeToInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribtionCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnreadEmailCountServer).SubscribeToInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email_proto.UnreadEmailCount/SubscribeToInbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnreadEmailCountServer).SubscribeToInbox(ctx, req.(*SubscribtionCmd))
	}
	return interceptor(ctx, in, info, handler)
}

// UnreadEmailCount_ServiceDesc is the grpc.ServiceDesc for UnreadEmailCount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnreadEmailCount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email_proto.UnreadEmailCount",
	HandlerType: (*UnreadEmailCountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnreadEmailCount",
			Handler:    _UnreadEmailCount_GetUnreadEmailCount_Handler,
		},
		{
			MethodName: "SubscribeToInbox",
			Handler:    _UnreadEmailCount_SubscribeToInbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/email_service.proto",
}

// NewEmailNotifClient is the client API for NewEmailNotif service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewEmailNotifClient interface {
	Notify(ctx context.Context, in *NewEmailCmd, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type newEmailNotifClient struct {
	cc grpc.ClientConnInterface
}

func NewNewEmailNotifClient(cc grpc.ClientConnInterface) NewEmailNotifClient {
	return &newEmailNotifClient{cc}
}

func (c *newEmailNotifClient) Notify(ctx context.Context, in *NewEmailCmd, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/email_proto.NewEmailNotif/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewEmailNotifServer is the server API for NewEmailNotif service.
// All implementations must embed UnimplementedNewEmailNotifServer
// for forward compatibility
type NewEmailNotifServer interface {
	Notify(context.Context, *NewEmailCmd) (*emptypb.Empty, error)
	mustEmbedUnimplementedNewEmailNotifServer()
}

// UnimplementedNewEmailNotifServer must be embedded to have forward compatible implementations.
type UnimplementedNewEmailNotifServer struct {
}

func (UnimplementedNewEmailNotifServer) Notify(context.Context, *NewEmailCmd) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedNewEmailNotifServer) mustEmbedUnimplementedNewEmailNotifServer() {}

// UnsafeNewEmailNotifServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewEmailNotifServer will
// result in compilation errors.
type UnsafeNewEmailNotifServer interface {
	mustEmbedUnimplementedNewEmailNotifServer()
}

func RegisterNewEmailNotifServer(s grpc.ServiceRegistrar, srv NewEmailNotifServer) {
	s.RegisterService(&NewEmailNotif_ServiceDesc, srv)
}

func _NewEmailNotif_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEmailCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewEmailNotifServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email_proto.NewEmailNotif/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewEmailNotifServer).Notify(ctx, req.(*NewEmailCmd))
	}
	return interceptor(ctx, in, info, handler)
}

// NewEmailNotif_ServiceDesc is the grpc.ServiceDesc for NewEmailNotif service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewEmailNotif_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email_proto.NewEmailNotif",
	HandlerType: (*NewEmailNotifServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _NewEmailNotif_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/email_service.proto",
}
